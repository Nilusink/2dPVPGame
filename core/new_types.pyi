"""
Author:
Nilusink
"""
import typing as tp


PI: float


def calculate_shot(target_delta: "Vec2", bullet_speed: float) -> float:
    """
    calculate the shooting angle for a bullet to hit a target

    :param target_delta: difference between the shooter and the target
    :param bullet_speed: the bullets initial velocity
    :return: the angle shoot at
    """


class Vec2:
    x: float
    y: float
    angle: float
    length: float
    __x: float
    __y: float
    __angle: float
    __length: float
    def __init__(self) -> None: ...
    # setters / getters
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, value: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, value: float) -> None: ...
    @property
    def xy(self) -> tuple[float, float]: ...
    @xy.setter
    def xy(self, xy: tuple[float, float]) -> None: ...
    @property
    def angle(self) -> float: ...
    @angle.setter
    def angle(self, value: float) -> None: ...
    @property
    def length(self) -> float: ...
    @length.setter
    def length(self, value: float) -> None: ...
    @property
    def polar(self) -> tuple[float, float]: ...
    @polar.setter
    def polar(self, polar: tuple[float, float]) -> None: ...
    # interaction
    def split_vector(self, direction: "Vec2") -> tuple["Vec2", "Vec2"]: ...
    def copy(self) -> "Vec2": ...
    def to_dict(self) -> dict: ...
    def normalize(self) -> "Vec2": ...
    def mirror(self, mirror_by: "Vec2") -> "Vec2": ...
    # maths
    def __add__(self, other: tp.Union["Vec2", float]) -> "Vec2": ...
    def __sub__(self, other: tp.Union["Vec2", float]) -> "Vec2": ...
    def __mul__(self, other: tp.Union["Vec2", float]) -> "Vec2": ...
    def __truediv__(self, other: float) -> "Vec2": ...
    # internal functions
    def __update(self, calc_from: str) -> None: ...
    def __abs__(self) -> float: ...
    def __repr__(self) -> str: ...
    # static methods.
    # creation of new instances
    @staticmethod
    def from_cartesian(x: float, y: float) -> "Vec2": ...
    @staticmethod
    def from_polar(angle: float, length: float) -> "Vec2": ...
    @staticmethod
    def from_dict(dictionary: dict) -> "Vec2": ...
    @staticmethod
    def normalize_angle(value: float) -> float: ...
